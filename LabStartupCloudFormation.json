{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "ACD_2.0",
    "Parameters": {
        "VpcCIDR": {
            "Default": "10.16.0.0/16",
            "Description": "The CIDR block for the VPC",
            "Type": "String",
            "AllowedValues": [
                "10.16.0.0/16"
            ]
        },
        "SubnetCIDR": {
            "Default": "10.16.10.0/24",
            "Description": "CIDR for public subnet",
            "Type": "String",
            "AllowedValues": [
                "10.16.10.0/24"
            ]
        },
        "LabUserId": {
            "Default": "arn:aws:sts:012345678-assumed-role/vocareum-role/username",
            "Description": "session user ARN",
            "Type": "String"
        },
        "KeyName": {
            "Description": "Amazon EC2 Key Pair",
            "Type": "AWS::EC2::KeyPair::KeyName"
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "Ubuntu": "ami-042e8287309f5df03"
            },
            "us-west-2": {
                "Ubuntu": "ami-0ca5c3bd5a268e7db"
            }
        }
    },
    "Resources": {
        "Cloud9": {
            "Type": "AWS::Cloud9::EnvironmentEC2",
            "Properties": {
                "InstanceType": "t2.micro",
                "SubnetId": {
                    "Ref": "Subnet"
                },
                "OwnerArn": {
                    "Ref": "LabUserId"
                },
                "Name": "Cloud9 Instance",
                "AutomaticStopTimeMinutes": 120
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VpcCIDR"
                },
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Cloud9 VPC"
                    }
                ]
            }
        },
        "Subnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Ref": "SubnetCIDR"
                },
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Cloud9 Subnet"
                    }
                ]
            }
        },
        "IGW": {
            "Type": "AWS::EC2::InternetGateway",
            "DependsOn": "VPC"
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "DependsOn": [
                "VPC",
                "IGW"
            ],
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "IGW"
                }
            }
        },
        "Ec2Route": {
            "Type": "AWS::EC2::RouteTable",
            "DependsOn": [
                "VPC",
                "AttachGateway"
            ],
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "RouteOut": {
            "Type": "AWS::EC2::Route",
            "DependsOn": [
                "Ec2Route",
                "AttachGateway"
            ],
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "IGW"
                },
                "RouteTableId": {
                    "Ref": "Ec2Route"
                }
            }
        },
        "SubnetRouteAssociate": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "DependsOn": [
                "Ec2Route",
                "Subnet"
            ],
            "Properties": {
                "RouteTableId": {
                    "Ref": "Ec2Route"
                },
                "SubnetId": {
                    "Ref": "Subnet"
                }
            }
        },
        "Ec2AppNodeSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 8000 and 80 + SSH access",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "MySQLServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable mysql access via port 3306 and ssh for now",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 3306,
                        "ToPort": 3306,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "EC2NodeInstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        }
                    }
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
                ]
            }
        },
        "Ec2AppNode": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": [
                "Ec2MySqlServerNode",
                "AttachGateway"
            ],
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Ubuntu"
                    ]
                },
                "InstanceType": "t2.micro",
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "Ec2AppNodeSecurityGroup"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "AppServerNode"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash -xe\napt update -y\napt install nodejs unzip wget npm -y\nwget https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/CUR-TF-200-ACCDEV-2/lab-06-containers/code.zip -P /home/ubuntu\ncd /home/ubuntu\nunzip code.zip -x \"resources/codebase_partner/node_modules/*\"\ncd resources/codebase_partner\nnpm install\nAPP_DB_HOST=${Ec2MySqlServerNode.PrivateIp} \\\n  APP_DB_USER=nodeapp \\\n  APP_DB_PASSWORD=coffee \\\n  APP_DB_NAME=COFFEE \\\n  APP_PORT=80 \\\n  npm start\n"
                    }
                }
            }
        },
        "Ec2MySqlServerNode": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "AttachGateway",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Ubuntu"
                    ]
                },
                "InstanceType": "t2.micro",
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "MySQLServerSecurityGroup"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "MysqlServerNode"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash -xe\napt update -y\napt install mysql-server -y\nmysql -u root -e \"CREATE USER 'nodeapp' IDENTIFIED WITH mysql_native_password BY 'coffee'\";\nmysql -u root -e \"GRANT all privileges on *.* to 'nodeapp'@'%';\"\nmysql -u root -e \"CREATE DATABASE COFFEE;\"\nmysql -u root -e \"USE COFFEE; CREATE TABLE suppliers(\n            id INT NOT NULL AUTO_INCREMENT,\n            name VARCHAR(255) NOT NULL,\n            address VARCHAR(255) NOT NULL,\n            city VARCHAR(255) NOT NULL,\n            state VARCHAR(255) NOT NULL,\n            email VARCHAR(255) NOT NULL,\n            phone VARCHAR(100) NOT NULL,\n            PRIMARY KEY ( id ));\"\n\nsed -i 's/.*bind-address.*/bind-address = 0.0.0.0/' /etc/mysql/mysql.conf.d/mysqld.cnf\nservice mysql restart\n"
                    }
                }
            }
        }
    },
    "Outputs": {
        "AppServerPublicIp": {
            "Description": "The public ip address for the coffee site",
            "Value": {
                "Fn::Sub": "http://${Ec2AppNode.PrivateIp}"
            }
        }
    }
}